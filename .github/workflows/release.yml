name: Release

on:
  release:
    types: [created]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: krkr-tts-linux-amd64
            asset_name: krkr-tts-linux-amd64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: krkr-tts-linux-arm64
            asset_name: krkr-tts-linux-arm64.tar.gz
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: krkr-tts-macos-amd64
            asset_name: krkr-tts-macos-amd64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: krkr-tts-macos-arm64
            asset_name: krkr-tts-macos-arm64.tar.gz
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: krkr-tts-windows-amd64
            asset_name: krkr-tts-windows-amd64.zip
          - os: windows-latest
            target: i686-pc-windows-msvc
            artifact_name: krkr-tts-windows-x86
            asset_name: krkr-tts-windows-x86.zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: krkr-tts-windows-arm64
            asset_name: krkr-tts-windows-arm64.zip

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux ARM)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build
      run: cargo build --release --bins --target ${{ matrix.target }}

    - name: Prepare artifacts (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p ${{ matrix.artifact_name }}/
        cp target/${{ matrix.target }}/release/krkr-tts-client ${{ matrix.artifact_name }}/
        cp target/${{ matrix.target }}/release/krkr-tts-server ${{ matrix.artifact_name }}/
        tar czvf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}/

    - name: Prepare artifacts (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p ${{ matrix.artifact_name }}
        cp target/${{ matrix.target }}/release/krkr-tts-client.exe ${{ matrix.artifact_name }}/
        cp target/${{ matrix.target }}/release/krkr-tts-server.exe ${{ matrix.artifact_name }}/
        powershell Compress-Archive -Path ${{ matrix.artifact_name }} -DestinationPath ${{ matrix.asset_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream